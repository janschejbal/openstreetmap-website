var epsg4326 = new OpenLayers.Projection("EPSG:4326");
var map;
var markers;
var vectors;
var popup;




///////////////// PIRATENKRAM ANFANG ///////////////////////////////////////////////////////////////////////////////////

function piraten_getFeatureStyles(feature) {
	var tags = feature.attributes;
	
	// nodes
	if (tags['plakat']) {
		var typ = '';
		var status = tags['plakat'];
		var validstatus = {'empfehlung':1, 'fehlt':1, 'gehaengt':1, 'kaputt':1, 'entfernt':1};
		if (!validstatus[status]) status = "gehaengt";
		
		if (tags['plakattyp']) {
			if (tags['plakattyp'] == 'wand') typ = 'wand-';
			if (tags['plakattyp'] == 'grossplakat') typ = 'grossplakat-';
		}
		
		return {'externalGraphic': 'http://www.janschejbal.de/piraten/piratenmap-definitions/images/plakat-'+typ+status+'.png'};
	}
	
	if (tags['ort'] == 'stammtisch') return {'externalGraphic': 'http://www.janschejbal.de/piraten/piratenmap-definitions/images/stammtisch.png'};
	if (tags['ort'] == 'geschaeftsstelle') return {'externalGraphic': 'http://www.janschejbal.de/piraten/piratenmap-definitions/images/geschaeftsstelle.png'};
	if (tags['aktion']) return {'externalGraphic': 'http://www.janschejbal.de/piraten/piratenmap-definitions/images/stand.png'};
	if (tags['demo'] == 'kundgebung') return {'externalGraphic': 'http://www.janschejbal.de/piraten/piratenmap-definitions/images/kundgebung.png'};
	
	// node AND way!
	if (tags['ueberwachung'] == 'kamera') return {
			'externalGraphic': 'http://www.janschejbal.de/piraten/piratenmap-definitions/images/kamera.png',
			'strokeColor': '#0000ff',	
			'strokeWidth': '3',	
			'strokeOpacity': 0.7,	
			'fillOpacity': 0.4,	
			'fillColor': '#0000ff',
		};

	// ways
	if (tags['demo'] == 'route') return {
			'strokeColor': '#ff8000',	
			'strokeWidth': '16',	
			'strokeOpacity': 0.8,	
		};

	if (tags['demo'] == 'bannmeile') return {
			'fillColor': '#ff0000',
			'fillOpacity': 0.4,	
			'strokeColor': '#ff0000',	
			'strokeOpacity': 1.0,	
			'strokeWidth': '4',
			'strokeDashstyle': 'dash',
		};
		
	if (tags['gebiet']) {
		var result = {
				'fillColor': '#666666',
				'fillOpacity': 0.3,					
				'strokeColor': '#666666',
				'strokeOpacity': 0.5,					
			};
		if (tags['gebietsstatus'] == "todo")       { result['fillColor'] = result['strokeColor'] = '#ff3333';}
		if (tags['gebietsstatus'] == "erledigt")   { result['fillColor'] = result['strokeColor'] = '#00ff00';}
		if (tags['gebietsstatus'] == "reserviert") { result['fillColor'] = result['strokeColor'] = '#ffff00';}
		return result;
	}
		
	console.log(feature);
	return {};
}

function piraten_getFeatureProperty(feature, propname, def) {
	var styles = piraten_getFeatureStyles(feature);
	if (styles && styles[propname]) {
		return styles[propname]; 
	} else {
		return def;
	}
}

function piraten_addLayers(map) {
	var generalContext = {
		fill:            function(feature) { return piraten_getFeatureProperty(feature, 'fill', true); },
		fillColor:       function(feature) { return piraten_getFeatureProperty(feature, 'fillColor', '#ee9900'); },
		fillOpacity:     function(feature) { return piraten_getFeatureProperty(feature, 'fillOpacity', 0.4); },
		stroke:          function(feature) { return piraten_getFeatureProperty(feature, 'stroke', true); },
		strokeColor:     function(feature) { return piraten_getFeatureProperty(feature, 'strokeColor', '#ee9900'); },
		strokeOpacity:   function(feature) { return piraten_getFeatureProperty(feature, 'strokeOpacity', 1.0); },
		strokeWidth:     function(feature) { return piraten_getFeatureProperty(feature, 'strokeWidth', 1.0); },
		strokeLinecap:   function(feature) { return piraten_getFeatureProperty(feature, 'strokeLinecap', 'round'); },
		strokeDashstyle: function(feature) { return piraten_getFeatureProperty(feature, 'strokeDashstyle', 'solid'); },
		graphic:         function(feature) { return piraten_getFeatureProperty(feature, 'graphic', true); },
		pointRadius:     function(feature) { return piraten_getFeatureProperty(feature, 'pointRadius', 6.0); },
		pointerEvents:   function(feature) { return piraten_getFeatureProperty(feature, 'pointerEvents', 'visiblePainted'); },
		cursor:          function(feature) { return piraten_getFeatureProperty(feature, 'cursor', ''); },
		externalGraphic: function(feature) { return piraten_getFeatureProperty(feature, 'externalGraphic', ''); },
		graphicWidth:    function(feature) { return piraten_getFeatureProperty(feature, 'graphicWidth', 24); },
		graphicHeight:   function(feature) { return piraten_getFeatureProperty(feature, 'graphicHeight', 24); },
		graphicOpacity:  function(feature) { return piraten_getFeatureProperty(feature, 'graphicOpacity', 1.0); },
		//graphicXOffset:  function(feature) { return piraten_getFeatureProperty(feature, 'graphicXOffset', -12); },
		//graphicYOffset:  function(feature) { return piraten_getFeatureProperty(feature, 'graphicYOffset', -12); },
		rotation:        function(feature) { return piraten_getFeatureProperty(feature, 'rotation', 0.0); },
		graphicName:     function(feature) { return piraten_getFeatureProperty(feature, 'graphicName', 'circle'); },
		display:         function(feature) { return piraten_getFeatureProperty(feature, 'display', ''); },
	};
	
	var generalTemplate = {
		fill:            "${fill}",
		fillColor:       "${fillColor}",
		fillOpacity:     "${fillOpacity}",
		stroke:          "${stroke}",
		strokeColor:     "${strokeColor}",
		strokeOpacity:   "${strokeOpacity}",
		strokeWidth:     "${strokeWidth}",
		strokeLinecap:   "${strokeLinecap}",
		strokeDashstyle: "${strokeDashstyle}",
		graphic:         "${graphic}",
		pointRadius:     "${pointRadius}",
		pointerEvents:   "${pointerEvents}",
		cursor:          "${cursor}",
		externalGraphic: "${externalGraphic}",
		graphicWidth:    "${graphicWidth}",
		graphicHeight:   "${graphicHeight}",
		graphicOpacity:  "${graphicOpacity}",
		//graphicXOffset:  "${graphicXOffset}",
		//graphicYOffset:  "${graphicYOffset}",
		rotation:        "${rotation}",
		graphicName:     "${graphicName}",
		display:         "${display}",
	}
	
	var style = new OpenLayers.Style(generalTemplate, {context: generalContext});
	var stylemap = new OpenLayers.StyleMap(style);
	
	var plakate = new OpenLayers.Layer.Vector("Plakate", {
				projection: "EPSG:4326",
				strategies: [new OpenLayers.Strategy.BBOX({ratio: 2})],
				protocol: new OpenLayers.Protocol.HTTP({
					url: '/overpass/interpreter?data=node["plakat"](bbox);out;',
					format: new OpenLayers.Format.OSM({})
				}),
				styleMap: stylemap,
				maxResolution: 40,
			});
   map.addLayer(plakate);
   var sonstiges = new OpenLayers.Layer.Vector("Sonstiges", {
				projection: "EPSG:4326",
				strategies: [new OpenLayers.Strategy.BBOX({ratio: 2})],
				protocol: new OpenLayers.Protocol.HTTP({
					url: '/overpass/interpreter?data=node["plakat"!~"."](bbox);out;way(bbox);out;',
					format: new OpenLayers.Format.OSM({})
				}),
				styleMap: stylemap,
   });
   map.addLayer(sonstiges);
}
///////////////// PIRATENKRAM ENDE /////////////////////////////////////////////////////////////////////////////////////










function createMap(divName, options) {
   options = options || {};

   var attribution = 'Basiskarte (c) <a target="_parent" href="http://www.openstreetmap.org">OpenStreetMap</a> und Mitwirkende, <a target="_parent" href="http://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>.'
   
   map = new OpenLayers.Map(divName, {
      controls: options.controls || [
         new OpenLayers.Control.ArgParser(),
         new OpenLayers.Control.Attribution(),
         //new SimpleLayerSwitcher(),
         new OpenLayers.Control.LayerSwitcher(),
         new OpenLayers.Control.Navigation(),
         new OpenLayers.Control.Zoom(),
         new OpenLayers.Control.SimplePanZoom(),
         new OpenLayers.Control.ScaleLine({geodesic: true})
      ],
      numZoomLevels: 20,
      displayProjection: new OpenLayers.Projection("EPSG:4326"),
      theme: "<%= asset_path 'theme/openstreetmap/style.css' %>"
   });
   
   var mapquest = new OpenLayers.Layer.OSM(I18n.t("javascripts.map.base.mapquest"), [
      "http://otile1.mqcdn.com/tiles/1.0.0/osm/${z}/${x}/${y}.png",
      "http://otile2.mqcdn.com/tiles/1.0.0/osm/${z}/${x}/${y}.png",
      "http://otile3.mqcdn.com/tiles/1.0.0/osm/${z}/${x}/${y}.png",
      "http://otile4.mqcdn.com/tiles/1.0.0/osm/${z}/${x}/${y}.png"
   ], {
      attribution: attribution + " Tiles courtesy of <a href='http://www.mapquest.com/' target='_blank'>MapQuest</a> <img src='http://developer.mapquest.com/content/osm/mq_logo.png'>",
      keyid: "mapquest",
      displayOutsideMaxExtent: true,
      wrapDateLine: true,
      numZoomLevels: 19,
      layerCode: "Q"
   });
   
   map.addLayer(mapquest);
   var mapnik = new OpenLayers.Layer.OSM.Mapnik(I18n.t("javascripts.map.base.standard"), {
      attribution: attribution,
      keyid: "mapnik",
      displayOutsideMaxExtent: true,
      wrapDateLine: true,
      layerCode: "M"
   });
   map.addLayer(mapnik);

   var cyclemap = new OpenLayers.Layer.OSM.CycleMap(I18n.t("javascripts.map.base.cycle_map"), {
      attribution: attribution + " Tiles courtesy of <a href='http://www.opencyclemap.org/' target='_blank'>Andy Allan</a>",
      keyid: "cyclemap",
      displayOutsideMaxExtent: true,
      wrapDateLine: true,
      layerCode: "C"
   });
   map.addLayer(cyclemap);

   var transportmap = new OpenLayers.Layer.OSM.TransportMap(I18n.t("javascripts.map.base.transport_map"), {
      attribution: attribution + " Tiles courtesy of <a href='http://www.opencyclemap.org/' target='_blank'>Andy Allan</a>",
      keyid: "transportmap",
      displayOutsideMaxExtent: true,
      wrapDateLine: true,
      layerCode: "T"
   });
   map.addLayer(transportmap);

   markers = new OpenLayers.Layer.Markers("Markers", {
      displayInLayerSwitcher: false,
      numZoomLevels: 20,
      projection: "EPSG:900913"
   });
   map.addLayer(markers);
   
   piraten_addLayers(map);

   return map;
}

function getArrowIcon() {
   var size = new OpenLayers.Size(25, 22);
   var offset = new OpenLayers.Pixel(-22, -20);
   var icon = new OpenLayers.Icon("<%= asset_path 'arrow.png' %>", size, offset);

   return icon;
}

function addMarkerToMap(position, icon, description) {
   var marker = new OpenLayers.Marker(proj(position), icon);

   markers.addMarker(marker);

   if (description) {
       marker.events.register("mouseover", marker, function() {
           openMapPopup(marker, description);
       });
   }

   return marker;
}

function addObjectToMap(url, zoom, callback) {
   var layer = new OpenLayers.Layer.Vector("Objects", {
      strategies: [ 
          new OpenLayers.Strategy.Fixed()
      ],
      protocol: new OpenLayers.Protocol.HTTP({
          url: url,
          format: new OpenLayers.Format.OSM()
      }),
      style: {
          strokeColor: "blue",
          strokeWidth: 3,
          strokeOpacity: 0.5,
          fillOpacity: 0.2,
          fillColor: "lightblue",
          pointRadius: 6
      },
      projection: new OpenLayers.Projection("EPSG:4326"),
      displayInLayerSwitcher: false
   });

   layer.events.register("loadend", layer, function() {
      var extent;

      if (this.features.length) {
         extent = this.features[0].geometry.getBounds();

         for (var i = 1; i < this.features.length; i++) {
            extent.extend(this.features[i].geometry.getBounds());
         }

         if (zoom) {
            if (extent) {
               this.map.zoomToExtent(extent);
            } else {
               this.map.zoomToMaxExtent();
            }
         }
      }

      if (callback) {
         callback(extent);
      }
   });

   map.addLayer(layer);
}

function addBoxToMap(boxbounds, id, outline) {
   if (!vectors) {
     // Be aware that IE requires Vector layers be initialised on page load, and not under deferred script conditions
     vectors = new OpenLayers.Layer.Vector("Boxes", {
        displayInLayerSwitcher: false
     });
     map.addLayer(vectors);
   }
   var geometry;
   if (outline) {
     vertices = boxbounds.toGeometry().getVertices();
     vertices.push(new OpenLayers.Geometry.Point(vertices[0].x, vertices[0].y));
     geometry = proj(new OpenLayers.Geometry.LineString(vertices));
   } else {
     geometry = proj(boxbounds.toGeometry());
   }
   var box = new OpenLayers.Feature.Vector(geometry, {}, {
      strokeWidth: 2,
      strokeColor: '#ee9900',
      fillOpacity: 0
   });
   box.fid = id;

   vectors.addFeatures(box);

   return box;
}

function openMapPopup(marker, description) {
   closeMapPopup();

   popup = new OpenLayers.Popup.FramedCloud("popup", marker.lonlat, null,
                                            description, marker.icon, true);
   popup.setBackgroundColor("#E3FFC5");
   map.addPopup(popup);

   return popup;
}

function closeMapPopup() {
   if (popup) {
      map.removePopup(popup);
      delete popup;
   }
}

function removeMarkerFromMap(marker){
   markers.removeMarker(marker);
}

function removeBoxFromMap(box){
   vectors.removeFeature(box);
}

function proj(x) {
    return x.clone().transform(epsg4326, map.getProjectionObject());
}

function unproj(x) {
    return x.clone().transform(map.getProjectionObject(), epsg4326);
}

function setMapCenter(center, zoom) {
   zoom = parseInt(zoom, 10);
   var numzoom = map.getNumZoomLevels();
   if (zoom >= numzoom) zoom = numzoom - 1;
   map.setCenter(proj(center), zoom);
}

function getEventPosition(event) {
   return map.getLonLatFromViewPortPx(event.xy).clone().transform(map.getProjectionObject(), epsg4326);
}

function getMapLayers() {
   var layerConfig = "";

   for (var i = 0; i < map.layers.length; i++) {
      if (map.layers[i].layerCode && map.layers[i].getVisibility()) {
         layerConfig += map.layers[i].layerCode;
      }
   }

   return layerConfig;
}

function setMapLayers(layerConfig) {
   if (layerConfig.charAt(0) == "B" || layerConfig.charAt(0) == "0") {
      var l = 0;

      for (var layers = map.getLayersBy("isBaseLayer", true), i = 0; i < layers.length; i++) {
         var c = layerConfig.charAt(l++);

         if (c == "B") {
            map.setBaseLayer(layers[i]);
         } else {
            map.layers[i].setVisibility(false);
         }
      }
   } else {
      for (var i = 0; i < map.layers.length; i++) {
         if (map.layers[i].layerCode) {
            if (layerConfig.indexOf(map.layers[i].layerCode) >= 0) {
               if (map.layers[i].isBaseLayer) {
                  map.setBaseLayer(map.layers[i]);
               } else {
                  map.layers[i].setVisibility(true);
               }
            } else if (!map.layers[i].isBaseLayer) {
               map.layers[i].setVisibility(false);
            }
         }
      }
   }
}
